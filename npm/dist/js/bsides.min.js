/*!
  * bsides v0.2.0.9000 (https://nteetor.github.com/yonder)
  * Copyright 2011-2025 Nathan Teetor <nate@haufin.ch>
  * Licensed under MIT (https://github.com/nteetor/yonder/blob/main/LICENSE.note)
  */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).$)}(this,(function(e){"use strict";class t{static get prefix(){return"bsides"}static get type(){throw"not implemented"}static get namespace(){return`.${this.type}`}get events(){return[]}constructor(){this.priority="deferred"}find(t){return e(t).find(`.${this.constructor.prefix}-${this.constructor.type}`)}getId(e){return e.id}getType(e){return null}getValue(e){throw"not implemented"}subscribe(t,s){this.events.forEach((r=>{e(t).on(`${r}${this.constructor.namespace}`,(()=>{s(this.priority)}))}))}unsubscribe(t){e(t).off(this.namespace)}receiveMessage(e,t){throw"not implemented"}getState(e){throw"not implemented"}getRatePolicy(e){return null}initialize(e){}dispose(e){}}class s extends t{static get type(){return"checkbox"}get events(){return["change"]}get selectors(){return{choice:".form-check-label",value:".form-check-input"}}getType(e){return console.log(this.constructor),`${this.constructor.prefix}${this.constructor.namespace}`}getValue(t){let s=e(t).find(this.selectors.value).map(((e,t)=>[[t.value,t.checked]])).get();return Object.fromEntries(s)}receiveMessage(t,s){const r=e(t),n=r.find(this.selectors.value);s.hasOwnProperty("options")&&(r.find(".form-check").remove(),r.html(s.options)),s.hasOwnProperty("select")&&(n.prop("checked",!1),n.filter(((e,t)=>s.select.includes(t.value))).prop("checked",!0)),s.hasOwnProperty("disable")&&(n.prop("disabled",!1),n.filter(((e,t)=>s.disable.includes(t.value))).prop("disabled",!0)),r.trigger("change")}}class r extends t{static get type(){return"checkboxbutton"}get events(){return["change"]}get selectors(){return{choice:".btn",value:".btn-check"}}getType(e){return console.log(this.constructor),`${this.constructor.prefix}${this.constructor.namespace}`}getValue(t){let s=e(t).find(this.selectors.value).map(((e,t)=>[[t.value,t.checked]])).get();return Object.fromEntries(s)}receiveMessage(t,s){const r=e(t),n=r.find(this.selectors.value);s.hasOwnProperty("options")&&(r.find(`${this.selectors.choice},${this.selectors.value}`).remove(),r.html(s.options)),s.hasOwnProperty("select")&&(n.prop("checked",!1),console.log(n),console.log(n.filter(((e,t)=>s.select.includes(t.value)))),n.filter(((e,t)=>s.select.includes(t.value))).prop("checked",!0)),s.hasOwnProperty("disable")&&(n.prop("disabled",!1),n.filter(((e,t)=>s.disable.includes(t.value))).prop("disabled",!0)),r.trigger("change")}}class n extends t{static get type(){return"form"}get events(){return["submit"]}get selectors(){return{submit:".bsides-btn-submit"}}initialize(t){const s=e(t);let r=new Map;s.on(`shiny:inputchanged${this.constructor.namespace}`,(e=>{console.log(e),e.el&&"event"!==e.priority&&(e.el.id!==t.id?t.contains(e.el)&&(r.set(e.name,e.value),e.preventDefault()):e.preventDefault())})),s.on(`click${this.constructor.namespace}`,this.selectors.submit,(e=>{e.preventDefault();for(const[e,t]of r.entries())console.log(`${e}: ${t}`),Shiny.setInputValue(e,t,{priority:"event"})}))}getValue(e){return null}receiveMessage(t,s){const r=e(t);!0===s.submit&&r.trigger(`submit${namespace}`)}}!function(){if(Shiny){const e=Shiny.inputBindings;e.register(new s,s.type),e.register(new r,r.type),e.register(new n,n.type)}}()}));
//# sourceMappingURL=bsides.min.js.map